(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{411:function(s,e,t){"use strict";t.r(e);var n=t(54),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"angular即学即用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#angular即学即用"}},[s._v("#")]),s._v(" Angular即学即用")]),s._v(" "),t("p",[s._v("项目地址："),t("a",{attrs:{href:"https://github.com/shyamseshadri/angular-up-and-running",target:"_blank",rel:"noopener noreferrer"}},[s._v("link"),t("OutboundLink")],1),s._v("\n官方API文档："),t("a",{attrs:{href:"https://angular.io/api",target:"_blank",rel:"noopener noreferrer"}},[s._v("API"),t("OutboundLink")],1),s._v("\n官方快速入门："),t("a",{attrs:{href:"https://angular.io/start",target:"_blank",rel:"noopener noreferrer"}},[s._v("start"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://angular.io/tutorial",target:"_blank",rel:"noopener noreferrer"}},[s._v("Angular Heroes"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"第2章-你好-angular"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第2章-你好-angular"}},[s._v("#")]),s._v(" 第2章：你好！Angular")]),s._v(" "),t("p",[s._v("初始化")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install -g typescript\nnpm install -g @angular/cli\nng --vesion\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/decorators.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript装饰器"),t("OutboundLink")],1),s._v("\ndeclarations: declarations块定义了在这个模块中允许在HTML范围内使用的所有组件。你所创建的任何组件都必须在使用之前进行声明\nimports：imports数组允许导入其他的Angular应用程序和库模块，从而利用这些模块中已经创建好的组件、服务和其他功能。\nbootstrap：bootstrap数组定义充当应用程序入口点的组件。")]),s._v(" "),t("p",[t("strong",[s._v("一个Angular组件只不过是一个TypeScript类，可以用一些属性和元数据修饰的类。该类封装了组件的所有数据和功能，而装饰器则指定了如何将其转换为HTML。")])]),s._v(" "),t("ul",[t("li",[s._v("app-selector是一个CSS选择器，它用于定义在一个HTML页面中如何找到特定的组件")]),s._v(" "),t("li",[s._v("templateUrl是用于呈现该组件的HTML的路径。")]),s._v(" "),t("li",[s._v("styleUrls是模板的样式，封装了该组件的所有样式。与templateUrl不同，styleUrls是一个数组。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ng generate component stock/stock-item\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("[]是语法可以用于元素的任何属性，它是一种从组件到UI的单向绑定。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[class]=\"positiveChange ? 'positive' : 'negative'\"\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Angular数据绑定只能用于DOM属性，而不能用于HTML属性。HTML属性通常用于DOM元素的初始化，但在此之后，它们对底层元素就没有任何影响了。一旦元素初始化之后，它的行为就会由DOM属性来控制。\n换句话说，HTML属性用于设置HTML DOM元素的初始值，但在此之后，它的行为由DOM属性来驱动。")]),s._v(" "),t("p",[t("strong",[s._v("事件绑定")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('(click)="toggleFavorite()"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这种语法被称为Angular事件绑定。")]),s._v(" "),t("p",[s._v("优化：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ng generate class model/stock\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"第3章-使用angular内置指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第3章-使用angular内置指令"}},[s._v("#")]),s._v(" 第3章：使用Angular内置指令")]),s._v(" "),t("p",[s._v("ngClass绑定多个CSS class类：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('[ngClass]="stockClasses"\n\n// ts\nngOnInit(): void {\n    this.stock = new Stock(\'Test Stock Company\', \'TSC\', 85, 80);\n    let diff = (this.stock.price / this.stock.previousPrice) - 1;\n    let largeChange = Math.abs(diff) > 0.01;\n    this.stockClasses = {\n      "positive": this.stock.isPositiveChange(),\n      "negative": !this.stock.isPositiveChange(),\n      "large-change": largeChange,\n      "small-change": !largeChange\n    }\n  }\n\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("ngStyle实现相同的效果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('[ngStyle]="stockStyles"\n\n// ts\nthis.stockStyles = {\n\t"color": \n.stock.isPositiveChange() ? "green": "red",\n\t"font-size": largeChange ? "1.2em": "0.8em"\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("逐个类名或者样式的绑定：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('[class.positive]="stock.isPositiveChange()"\n[class.\n]="!stock.isPositiveChange()"\n\n[style.background-color]="stock.isPositiveChange() ? \'green\' : \'red\'"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("但是，如果涉及的class不止一两个的时候，最好用NgClass指令，因为它更容易管理和测试。")])]),s._v(" "),t("p",[t("strong",[s._v("内置结构化指令")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://angular.io/guide/attribute-directives",target:"_blank",rel:"noopener noreferrer"}},[s._v("Attribute directives"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("所有的结构化指令都是用星号（*）开头的。\nNgIf指令允许你在UI中有条件地隐藏或显示元素。")]),s._v(" "),t("p",[s._v("而NgFor指令用于创建多个元素，通常会为一个数组中的每个实例单独创建一个。\n从技术上讲，*ngFor指令使用的是底层的NgForOf这个类。")]),s._v(" "),t("p",[s._v("在浏览器中，元素创建或删除是两个代价高昂的操作。")]),s._v(" "),t("p",[s._v("我们只需要修改了*ngFor,在这个微语法中传递一个额外的属性，即trackBy:trackStockByCode。这将确保Angular调用这个函数而不是使用object reference来识别每个item。\n这确保了即使我们重新加载服务器的所有股票（这会改变所有的object reference），Angular仍然会通过查看股票代码来决定是否重用DOM中的元素。")]),s._v(" "),t("p",[s._v("NgSwitch本身并不是一个结构指令，而是一个属性指令。\nNgSwitchCase和NgSwitchDefault才是真正的结构指令。")]),s._v(" "),t("h2",{attrs:{id:"第4章-理解和使用angular组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第4章-理解和使用angular组件"}},[s._v("#")]),s._v(" 第4章：理解和使用Angular组件")]),s._v(" "),t("p",[s._v("在组件中只能指定template和templateUrl两者之一。你不能同时使用两者，但必须至少有一个。")]),s._v(" "),t("p",[t("strong",[s._v("样式封装：")])]),s._v(" "),t("ul",[t("li",[s._v("ViewEncapsulation.Emulated： 这是默认值，Angular会创建模拟影子DOM和影子root行为的胶水代码。")]),s._v(" "),t("li",[s._v("ViewEncapsulation.Native：这是理想情况，Angular会使用影子root。这只适用本来就支持它的浏览器和平台。")]),s._v(" "),t("li",[s._v("ViewEncapsulation.None：使用全局CSS，没有任何封装。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("变化检测：")]),s._v(" "),t("p",[s._v("当需要更新UI时，我们可能想显式地告诉Angular什么时候更新UI，而不是让Angular自己决定更新UI的时机。为了实现这一点，我们需要用changeDetection属性，将默认的Detection Strategy.Default修改为C hangeDetectionStrategy.OnPush。")]),s._v(" "),t("p",[s._v("组件和模块：")]),s._v(" "),t("p",[s._v("对于在模块上下文中使用的任何组件，必须将其倒入到模块声明文件中，并在declarations数组中进行声明。这确保了组件对模块中的其它组件是可见的。")]),s._v(" "),t("p",[s._v("declarations属性确保组件和指令可以在模块的范围内使用。")]),s._v(" "),t("p",[s._v("如果你有多个模块，或者你要创建一个供其他开发人员使用的库，那么就要用到exports属性了。")]),s._v(" "),t("p",[s._v("输入：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 子组件\n@Input() public stock: Stock;\n\n// 父组件\nexport class AppComponent implements OnInit {\n\ttitle = 'Stock Market App';\n\tpublic stockObj: Stock;\n\t\n\tngOnInit(): void {\n\t\tthis.stockObj = new Stock('Test Stock Company', 'TSC', 85, 80);\n\t}\n}\n\n<app-stock-item [stock]=\"stockObj\"></app-stock-item>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("输出：子组件定义的@Output() 名作为一个事件去绑定")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件\n<button (click)="onToggleFavorite($event)"\n          *ngIf="!stock.favorite">Add to Favorite</button>\n          \nexport class StockItemComponent {\n\n  @Input() public stock: Stock;\n  @Output() private toggleFavorite: EventEmitter<Stock>;\n\n  constructor() {\n    this.toggleFavorite = new EventEmitter<Stock>();\n   }\n\n  onToggleFavorite(event) {\n    this.toggleFavorite.emit(this.stock);\n  }\n}\n\n// 父组件\n<app-stock-item [stock]="stock"\n                (toggleFavorite)="onToggleFavorite($event)"></app-stock-item>\n                \nonToggleFavorite(stock: Stock) {\n    console.log(\'Favorite for stock \', stock, \' was triggered\');\n    this.stock.favorite = !this.stock.favorite;\n  }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("生命周期：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("constructor\nngOnChanges\nngOnInit\nngDoCheck\n\tngAfterCoontentInit\n\tngAfterContentChecked\n\tngAfterViewInit\n\tngAfterViewChecked\nngOnDestroy\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("因此，父子组件生命周期出发过程：")]),s._v(" "),t("ul",[t("li",[s._v("On Init")]),s._v(" "),t("li",[s._v("Do Check")]),s._v(" "),t("li",[s._v("After Content Init")]),s._v(" "),t("li",[s._v("After Content Checked\n"),t("ul",[t("li",[s._v("On Init")]),s._v(" "),t("li",[s._v("Do Check")]),s._v(" "),t("li",[s._v("After Content Init")]),s._v(" "),t("li",[s._v("After Content Checked")]),s._v(" "),t("li",[s._v("After View Init")]),s._v(" "),t("li",[s._v("After View Checked")])])]),s._v(" "),t("li",[s._v("After View Init")]),s._v(" "),t("li",[s._v("AFter View Checked")])]),s._v(" "),t("p",[s._v("内容投影深入介绍："),t("a",{attrs:{href:"https://medium.com/claritydesignsystem/ng-content-the-hidden-docs-96a29d70d11b",target:"_blank",rel:"noopener noreferrer"}},[s._v("《ng-content: The hidden docs》"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"第5章-测试angular组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第5章-测试angular组件"}},[s._v("#")]),s._v(" 第5章：测试Angular组件")]),s._v(" "),t("p",[s._v("如果Jasmine事测试编写框架，那么Karma就是测试运行框架。Karma的唯一任务是进行任何类型的测试，并通过一系列真实浏览器运行它并报告结果。它高度关注开发工作流，因为它主要面向的是快速执行和报告。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://angular.io/guide/testing",target:"_blank",rel:"noopener noreferrer"}},[s._v("Angular Testing"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("describe('AppComponent', () => {\n\n  describe('Simple, No Angular Unit Test', () => {\n    it('should have stock instantiated on ngInit', () => {\n      const appComponent = new AppComponent();\n      expect(appComponent.stock).toBeUndefined();\n      appComponent.ngOnInit();\n      expect(appComponent.stock).toEqual(\n        new Stock('Test Stock Company', 'TSC', 85, 80));\n    });\n\n    it('should have toggle stock favorite', () => {\n      const appComponent = new AppComponent();\n      appComponent.ngOnInit();\n      expect(appComponent.stock.favorite).toBeFalsy();\n      appComponent.onToggleFavorite(new Stock('Test', 'TEST', 54, 55));\n      expect(appComponent.stock.favorite).toBeTruthy();\n      appComponent.onToggleFavorite(new Stock('Test', 'TEST', 54, 55));\n      expect(appComponent.stock.favorite).toBeFalsy();\n    });\n  });\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("注意，在隔离单元测试中，Angular生命周期方法不是自动调用的，这就是为什么我们在测试中手动调用ngOnInit的原因。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://jasmine.github.io/api/2.8/matchers.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("jasmine matchers"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("非异步的beforeEach, 在上一个beforeEach之后执行。")]),s._v(" "),t("p",[s._v("在这个beforeEach中，我们调用fixture.detectChanges()。这是一个给Angular的信号，触发它的变化检测机制，它会查看组件中的值并更新相应HTML中的绑定。它也是组件第一次执行ngOnInit的触发器。如果没有这个，组件的HTML就不会有任何值。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints",target:"_blank",rel:"noopener noreferrer"}},[s._v("Chrome DevTools使用断点调试代码"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("忘记调用fixture.detectChanges()是编写Angular测试时最常见的错误之一。默认情况下，它是手动调用的，因此当用户交互或服务器响应的事件发生时，它由开发人员触发。")]),s._v(" "),t("h2",{attrs:{id:"第6章-使用模板驱动表单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第6章-使用模板驱动表单"}},[s._v("#")]),s._v(" 第6章：使用模板驱动表单")]),s._v(" "),t("p",[s._v("我们向input表单元素添加了一个name字段。这对于ngModel指令的使用是必需的。")]),s._v(" "),t("p",[s._v("我们添加的第二个绑定是ngModelChange事件绑定。在这里，我们用$event的值更新底层组件的成员变量(stock.name), $event是文本表单字段的变化值。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<input type="text"\n\tplaceholder="Stock name"\n\tname="stockName"\n\t[ngModel]="stock.name"\n\t(ngModelChange)="stock.name=$event">\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("有一个更简单的版本，即我们用得最多的[(ngModel)]香蕉语法。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<input type="text"\n\tplaceholder="Stock name"\n\tname="stockName"\n\t[(ngModel)]="stock.name">\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("模板引用变量：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<input type="text" #myStockField name="stockName">\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("直接通过myStockField.value访问它的值，然后将其作为参数传递给函数。")]),s._v(" "),t("h2",{attrs:{id:"第7章-使用响应式表单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第7章-使用响应式表单"}},[s._v("#")]),s._v(" 第7章：使用响应式表单")]),s._v(" "),t("p",[s._v("响应式表单的核心是FormControl，它直接表示模板中的单个form元素。因此，任何响应式表单都只是一系列分组的FormControl。在FormControl级别，我们还会指定初始值和验证器（同步和异步）。")]),s._v(" "),t("p",[s._v("当我们需要跟踪任何单个表单元素（比如输入框或复选框）的状态和值时，就可以使用FormContrl。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public stockForm: FormGroup = new FormGroup({\n  name: new FormControl(null, Validators.required),\n  code: new FormControl(null, [Validators.required, Validators.minLength(2)]),\n  price: new FormContrl(0, [Validators.required, Validators.min(0)])\n});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("官方内置的"),t("a",{attrs:{href:"https://angular.io/api/forms/Validators",target:"_blank",rel:"noopener noreferrer"}},[s._v("validator"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("FormBuilder本质上是一种语法糖，允许我们快速创建表单组和表单控件元素，而不需要手动地去new每个元素。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public stockForm: FormGroup;\nconstructor(private fb: FormBuilder) {\n  this.createForm();\n}\ncreateForm() {\n  this.stockForm = this.fb.group({\n    name: [null, Validators.required],\n    code: [null, [Validators.required, Validators.minLength(2)]],\n    price: [0, [Validators.required, Validators.min(0)]]\n  })\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("表单中获取值：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export class CreateStockComponent {\n  get name() { return this.stockForm.get('name'); }\n  get price() { return this.stockForm.get('price'); }\n  get code() { return this.stockForm.get('code'); }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"第8章-angular服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第8章-angular服务"}},[s._v("#")]),s._v(" 第8章：Angular服务")]),s._v(" "),t("p",[s._v("在一个Angular App中，实际数据的获取和公共业务逻辑应该由谁来负责？这就用到了Angular服务。Angular服务通常会是跨过APP的一层，它可以跨过各种组件重用。\n创建服务的用途：")]),s._v(" "),t("ul",[t("li",[s._v("向服务器获取数据或发送数据")]),s._v(" "),t("li",[s._v("需要封装不特定于任何组件或者可以跨组件重用的应用的应用程序逻辑")]),s._v(" "),t("li",[s._v("需要跨组件共享数据，尤其是这些组件彼此互不知道的时候。")])]),s._v(" "),t("p",[s._v("服务它是从组件中抽象出来的关于“怎么做”的一层，以便组件专注于”做什么“，而服务则决定了”怎么做“。")]),s._v(" "),t("p",[s._v("在Angular模块中的providers数组是告诉Angular去创建服务的单例，并使其对任何需要它的类或组件可用。当我们在模块级别注册它时，意味着模块中的任何需要它的组件都会被注入同一个相同的实例。")]),s._v(" "),t("p",[s._v("依赖注入时在静态语言中出现的，这些语言常见于服务器端编程。简单地说，依赖注入是指某个类或函数会需要一个不是自己实例化的依赖对象。由其他对象（通常称为注入器）来负责提供这个对象及实例化这个对象。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://angular.io/guide/dependency-injection",target:"_blank",rel:"noopener noreferrer"}},[s._v("dependency-injection"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("两种实例化：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class MyDummyService {\n\tgetMyData() {\n\t\tlet httpService = new HttpService();\n\t\treturn httpService.get('my/api');\n\t}\n}\n\nclass MyDIService {\n\tconstructor(private httpService: HttpService) {}\n\tgetMyData() {\n\t\treturn this.httpService.get('my/api');\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("对于很简单的需求，将Angular的依赖注入服务看作一个非常简单的键值存储就足够了，任何组件或类在初始化时都可以向它请求一个key。")]),s._v(" "),t("p",[s._v("我们创建的每一个服务都需要向注入器注册一个提供者。然后，任何其他类都可以请求服务，而注入器将负责提供服务。")]),s._v(" "),t("p",[s._v("请注意，我们将messageService设置为public的，这样就可以在模板中访问它了。我们确认只有一个MessageService实例存在，它在两个组件之间共享。")]),s._v(" "),t("p",[s._v("当组件请求依赖时，Angular就会检查注入器树中距离最近的注入器，看它是否匹配。如果匹配，就用它来提供。如果没有，就检查父注入器，一直到根注入器。")]),s._v(" "),t("p",[t("strong",[s._v("RxJS和Observables：使用异步操作")])]),s._v(" "),t("p",[s._v("Promise比起回掉来说，是一种更好的、惯用的处理一步行为的方法。同时，Angular为了避免它的一些缺陷，用Observable代替了它。")]),s._v(" "),t("ul",[t("li",[s._v("Promise是对单个异步事件的操作，而Observable允许我们处理零个或多个异步事件流。")]),s._v(" "),t("li",[s._v("与Promise不同，Observ able可以被取消。也就是说，Promise无论执行成功还是出错handler都会最终被调用，而Observable不同，如果我们不再关心它时，我们就可以取消订阅，同时不再处理数据。")]),s._v(" "),t("li",[s._v("Observable使我们能够很容易地组合和创建一个转换链。")])]),s._v(" "),t("p",[t("a",{attrs:{href:"http://reactivex.io/intro.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("ReactiveX官方文档"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("getStocks(): Observable<Stock[]> {\n\treturn ObservableOf(this.stocks);\n}\n\n// 使用者订阅\nngOnInit() {\n\tthis.stockService.getStocks()\n\t\t.subscribe(stocks => {\n\t\t\tthis.stocks = stocks;\n\t\t})\n}\ncreateStock(stockForm) {\n\tif(stockForm.valid) {\n\t\tthis.stockService.createStock(this.stock)\n\t\t\t.subscribe((result: any) => {\n\t\t\t\tthis.message = result.msg;\n\t\t\t\tthis.stock = new Stock('', '', 0, 0, 'NASDAQ');\n\t\t\t}, (err) => {\n\t\t\t\tthis.message = err.msg;\n\t\t\t})\n\t} else {\n\t\tconsole.error('Stock form is in an invalid state');\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("模板处理异步行为：")]),s._v(" "),t("p",[s._v("ngFor表达式中使用了管道操作。Angular提供了一个async管道，它允许我们绑定Observable。然后，Angular就会负责等待Observable发送事件，再直接将结果显示出来。它为我们省去了手动订阅Observable的那一步。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export class StockListComponent implements OnInit {\n\tpublic stocks$: Observable<Stock[]>;\n\tconstructor(private stockService: StockService){}\n\tngOnInit() {\n\t\tthis.stocks$ = this.stockService.getStocks();\n\t}\n\tonToggleFavorite(stock: Stock) {\n\t\tthis.stockService.toggleFavorite(stock);\n\t}\n}\n\n// 模板的使用\n<app-stock-item *ngFor="let stock of stocks$ | async"\n\t[stock]="stock"\n\t(toggleFavorite)="onToggleFavorite($event)">\n</app-stock-item>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h2",{attrs:{id:"第9章-angular与http请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第9章-angular与http请求"}},[s._v("#")]),s._v(" 第9章：Angular与HTTP请求")]),s._v(" "),t("p",[s._v("首先我们需要在App Module中添加对HttpClientModule的依赖。将src/app/app.module.ts的文件导入HttpClientModule，而不是HttpModule。")]),s._v(" "),t("p",[s._v("在需要用到请求的文件中导入HttpClient")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import { HttpClientModule } from '@angular/common/http';\n\nimport { HttpClient } from '@angular/common/http';\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("跨域问题，Angular App根文件下创建一个proxy.conf.json文件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('{\n\t"/api": {\n\t\t"target": "http://localhost:3000",\n\t\t"secure": false\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("理解HttpInterceptor的一个关键是它的链式结构。在请求时会都可以决定是否要修改请求。它可以通过使用调用HttpHandler继续将请求传递给后续链。如果只有一个拦截器，那么handler将简单地将请求对象发送给后端。如果有更多的拦截器，则传递给链中的下一个拦截器。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("providers: [\n\tStockService,\n\tAuthService,\n\t{\n\t\tprovide: HTTP_INTERCEPTIORS,\n\t\tuseClass: StockAppInterceptor,\n\t\tmulti: true,\n\t}\n]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("HttpRequest和HttpResponse实例都是不可变的。因此，我们需要修改它们，必须创建新的不可变实例。")]),s._v(" "),t("p",[t("strong",[s._v("Observable进阶")])]),s._v(" "),t("p",[s._v("从根本上说，一个Observable只是一个连接生产者和消费者的函数。冷信号会创建生产者，而热信号则是共享生产者的。")]),s._v(" "),t("p",[s._v("如果有人订阅了一个Angular Observable，就会为这个对象创建出生产者。这就是为什么每次订阅，我们都会有一个新的生产者。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hot vs Code Observables"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("在App中使用AsyncPipe是要注意，如果在同一个Observable上使用多个异步管道而不是共享底层Observable时，会导致重复的服务器调用。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ngOnInit() {\n\tthis.stocks$ = this.searchTerms.pipe(\n\t\tstarWith(this.searchString),\n\t\tdebounceTime(500),\n\t\tdistinctUntilChanged(),\n\t\tswitchMap((query) => this.stockService.getStocks(query)),\n\t\tshare()\n        );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("为了形成链，我们在Observable上使用了pipe操作符，然后就可以向管道函数添加任意数量的以参数形式构成的操作符。")]),s._v(" "),t("p",[s._v("Observable操作符distinctUntilChanged()。这可以确保仅当新值与前一个值不同时才发出事件，从而节省更多的网络调用。")]),s._v(" "),t("p",[s._v("switchMap有一个好处，除了可以将一种Observable转换为另一种Observable之外，它还能够取消旧的、正在运行的订阅。")]),s._v(" "),t("p",[s._v("操作符参考："),t("a",{attrs:{href:"http://reactivex.io/rxjs/manual/overview.html#operators",target:"_blank",rel:"noopener noreferrer"}},[s._v("rxjs operators"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"第10章-对服务器进行单元测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第10章-对服务器进行单元测试"}},[s._v("#")]),s._v(" 第10章：对服务器进行单元测试")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("describe('StockService', () => {\n\tbeforeEach(() => {\n\t\tTestBed.configureTestingModule({\n\t\t\tproviders: [StockService]\n\t\t});\n\t});\n\t\n\tit('should be created', inject([StockService],\n\t\t(service: StockService) => {\n\t\texpect(service).toBeTruthy();\n\t\t}))\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("在it块中是真正的测试，我们不算是只传递测试函数传递给它，我们调用了inject，它是Angular测试工具提供的一个函数。我们在第一个参数中传递一个数组，即需要注入到测试中的Angular服务。第二个参数是一个函数，它获取参数的顺序与我们传递给数组的顺序相同，在这个函数中编写实际的测试。")]),s._v(" "),t("p",[t("strong",[s._v("模拟服务测试组件：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("beforeEach(() => {\n\tfixture = TestBed.createComponent(StockListComponent);\n\tcomponent = fixture.componentInstance;\n\t// 通过注入方式获取服务\n\tstockService = fixture.debugElement.injector.get(StockService);\n\tlet spy = spyOn(stockService, 'getStocks')\n\t\t.and.returnValue([\n\t\t\tnew Stock('Mock Stock', 'MS', 800, 900, 'NYSE')\n\t\t]);\n\tfixture.detectChanges();\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("一旦我们获得服务对象，我们就可以使用Jasmine 的spy来监听服务商的不同方法。Spy（无论是来自Jasmine还是其他框架）允许我们对任何函数或方法进行代理，记录它的调用和参数，也可以指定我们自己的返回值。")]),s._v(" "),t("p",[t("strong",[s._v("用假服务测试组件：")])]),s._v(" "),t("p",[s._v("如果你有一个重复的测试用例，那么创建一个可以重用的假服务也是可以的。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("TestBed.configureTestingModule({\n\tdeclarations: [ StockListComponent, StockItemComponent ],\n\tproviders: [{\n\t\tprovide: StockService,\n\t\tuseValue: stockServiceFake\n\t}]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("我们告诉Angular，每当有人请求StockService(用provide指定)时，就提供stockServiceFake（由useValue指定）给它。这会覆盖类实例的默认提供行为。")]),s._v(" "),t("p",[s._v("获取服务对象（即使是假服务）的推荐方法是通过注入器。这是因为我们在测试中创建的fakeStockService对象和Angular用依赖注入提供的对象是不一样的。")]),s._v(" "),t("p",[t("strong",[s._v("异步单元测试：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("fixture.whenStable().then(() => {\n\tfixture.detectChanges();\n\texpect(component.message)\n\t\t.toEqual(\"Tock with code MNTS successfully created\");\n\tconst messageEl = fixture.debugElement.query(\n\t\tBy.css('.message')).nativeElement;\n\texpect(messageEl.textContent)\n\t\t.toBe('Stock with code MNTS successfully created');\n});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("在异步测试中，使用whenStable总错不了。")])]),s._v(" "),t("p",[s._v("我们用fakseAsync函数取代了whenStable函数，现在用一个简单的tick()函数完成同样的工作。这样代码看起来更“线性”一些，可读性更好。")]),s._v(" "),t("p",[s._v("在假异步测试中，实际有两个方法可以模拟时间的流逝，分别是tick()和flush()。tick模拟经过了一段时间（可以传递一个毫秒数的参数给它）。flush则使用次数作为参数，次数表示任务队列被完成过多少次。")]),s._v(" "),t("p",[s._v("httpBackend.expectOne还支持用一个HttpRequest对象作为一个config对象，来代替URL参数和method参数。")]),s._v(" "),t("h2",{attrs:{id:"第11章-路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第11章-路由"}},[s._v("#")]),s._v(" 第11章：路由")]),s._v(" "),t("p",[s._v("测试")]),s._v(" "),t("h2",{attrs:{id:"第12章-部署到生产"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第12章-部署到生产"}},[s._v("#")]),s._v(" 第12章：部署到生产")])])}),[],!1,null,null,null);e.default=a.exports}}]);